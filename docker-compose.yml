version: '3.8'

services:
  # ――――――[PostgreSQL + pgvector] ――――――
  db:
    image: pgvector/pgvector:pg16
    container_name: postgres-db
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: sungho
      POSTGRES_PASSWORD: "0000"
      POSTGRES_INITDB_ARGS: "-c shared_buffers=256MB -c max_connections=200"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/initdb:/docker-entrypoint-initdb.d:ro
    networks: [appnet]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sungho -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1024m
        reservations:
          memory: 512m

  # ――――――[Redis] ――――――
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --save 300 10
      --save 900 1
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks: [appnet]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512m




  # ――――――[Backend] ――――――
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: spring-app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker

      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/app
      SPRING_DATASOURCE_USERNAME: sungho
      SPRING_DATASOURCE_PASSWORD: "0000"


      # Redis
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379



      # JVM Options
      JAVA_OPTS: "-Xms512m -Xmx1g -XX:+UseG1GC"

    ports:
      - "8080:8080"
    networks: [appnet]
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1500m
        reservations:
          memory: 512m


volumes:
  db_data:
    driver: local
  redis_data:
    driver: local

networks:
  appnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16