plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named("bootJar") {
    archiveFileName = "app.jar"
}

ext {
    set('querydslVersion', '5.0.0')
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'

    // Firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // PostgreSQL & PGVector
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'com.pgvector:pgvector:0.1.6'
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

    // Spring Retry for simple retry logic
    implementation 'org.springframework.retry:spring-retry'

    // OpenAI
    implementation 'com.theokanning.openai-gpt3-java:service:0.18.2'
    implementation 'com.theokanning.openai-gpt3-java:api:0.18.2'
    
    // HTTP Client for external ML APIs
    implementation 'org.springframework.boot:spring-boot-starter-webflux'


    // Cache
    implementation 'org.ehcache:ehcache:3.10.8'
    implementation 'org.apache.commons:commons-pool2:2.11.1'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Lombok - 버전을 명시적으로 지정
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // MapStruct - 버전을 명시적으로 지정
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    // Annotation Processors - 순서 중요!
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // QueryDSL - Spring Boot 3.x 호환 버전
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    implementation "com.querydsl:querydsl-core:${querydslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    // Database
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.1.4'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

// 컴파일 옵션
compileJava {
    options.compilerArgs = [
            '-parameters',
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

test {
    useJUnitPlatform()
}